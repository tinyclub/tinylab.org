<?xml version="1.0" encoding="UTF-8"?>
<html xml:lang="zh-Hans" xmlns="http://www.w3.org/1999/xhtml"><head><title>3 第 3 节 | load</title><link rel="stylesheet" href="table-shared.css" type="text/css"/><meta charset="UTF-8"/><meta name="EPB-UUID" content="EBA3548B-AAA6-4877-BAE4-6AF4A8ED99F0"/></head><body><div class="body" style="white-space:pre-wrap; line-break:strict;"><p class="p15" style=""> </p><p class="p16" style=""> </p><table class="s1" style="border-collapse:collapse;margin-left:0;width:100.0%;"><colgroup><col style="width:38.8%"/><col style="width:61.2%"/></colgroup><tr style="height:8.3%;"><td class="tc31"><p class="p5 p7" style="">task_tick → task_tick_fair()</p><p class="p5 p7" style=""> </p></td><td class="tc32"><p class="p5 p17" style="">update task_group</p><p class="p5 p7" style=""> </p><p class="p5 p7" style="">for_each_sched_entity:</p><p class="p5 p7" style="">  entity_tick()</p><p class="p5 p7" style="">    <span class="c1">update_load_avg(se, UPDATE_TG)</span></p></td></tr><tr style="height:8.3%;"><td rowspan="2" class="tc33 p2 p7">enqueue_task_fair() / dequeue_task_fair()</td><td class="tc34"><p class="p5 p17" style="">per-entity update</p><p class="p5 p7" style=""> </p><p class="p5 p7" style="">for_each_sched_entity:</p><p class="p5 p7" style="">  enqueue_entity() / dequeue_entity()</p><p class="p5 p7" style="">    <span class="c1">update_load_avg(se, UPDATE_TG)</span></p><p class="p5 p7" style="">    <span class="c4">enqueue_entity_load_avg(cfs_rq, se) / dequeue_entity_load_avg()</span></p></td></tr><tr style="height:8.3%;"><td class="tc34"><p class="p5 p17" style="">update task_group</p><p class="p5 p7" style=""> </p><p class="p5 p7" style="">for_each_sched_entity():</p><p class="p5 p7" style="">  <span class="c1">update_load_avg(se, UPDATE_TG)</span></p></td></tr><tr style="height:8.3%;"><td class="tc23 p2 p7">pick_next_task → pick_next_task_fair()</td><td class="tc34"><p class="p5 p7" style="">put_prev_entity()</p><p class="p5 p7" style="">  <span class="c1">update_load_avg(se, UPDATE_TG)</span></p><p class="p5 p7" style="">set_next_entity()</p><p class="p5 p7" style="">  <span class="c1">update_load_avg(se, UPDATE_TG)</span></p></td></tr><tr style="height:8.3%;"><td class="tc23 p2 p7">put_prev_task → put_prev_task_fair()</td><td class="tc34"><p class="p5 p7" style="">for_each_sched_entity</p><p class="p5 p7" style="">  put_prev_entity()</p><p class="p5 p7" style="">    <span class="c1">update_load_avg(prev, 0)</span></p></td></tr><tr style="height:8.3%;"><td rowspan="2" class="tc35"><p class="p5 p7" style="">CGroup[CPU] 中 task fork</p><p class="p5 p7" style="">或被移另一个 CGroup[CPU]</p><p class="p5 p7" style=""> </p><p class="p5 p7" style="">task_change_group → task_change_group_fair()</p></td><td class="tc34"><p class="p5 p17" style="">update prev cfs_rq</p><p class="p5 p7" style=""> </p><p class="p5 p7" style="">task_set_group_fair()</p><p class="p5 p7" style="">  set_task_rq()</p><p class="p5 p7" style="">    set_task_rq_fair()</p><p class="p5 p7" style="">      <span class="c5">__update_load_avg(p_last_update_time, cpu_of(rq_of(prev)), &amp;se-&gt;avg, 0, 0, NULL)</span></p></td></tr><tr style="height:8.3%;"><td class="tc34"><ol style="padding:0 0 0 1px; margin:0;"><li class="p5 p18 li1 b1" style=""><span class="c6">update entity</span></li></ol><ol style="padding:0 0 0 1px; margin:0;"><li class="p5 p18 li1 b1" style=""><span class="c6">update prev cfs_rq</span></li></ol><ol style="padding:0 0 0 1px; margin:0;"><li class="p5 p18 li1 b1" style=""><span class="c6">update entity</span></li></ol><p class="p5 p7" style=""> </p><p class="p5 p7" style="">task_move_group_fair()</p><p class="p5 p7" style="">  detach_task_cfs_rq()</p><p class="p5 p7" style="">    detach_entity_cfs_rq()</p><p class="p5 p7" style="">      <span class="c1">update_load_avg(se, 0)</span></p><p class="p5 p7" style="">      propagate_entity_cfs_rq(se)</p><p class="p5 p7" style=""> </p><p class="p5 p7" style="">  set_task_rq()</p><p class="p5 p7" style="">    set_task_rq_fair()</p><p class="p5 p7" style="">      <span class="c5">__update_load_avg(p_last_update_time, cpu_of(rq_of(prev)), &amp;se-&gt;avg, 0, 0, NULL)</span></p><p class="p5 p7" style=""> </p><p class="p5 p7" style="">  attach_task_cfs_rq()</p><p class="p5 p7" style="">    attach_entity_cfs_rq()</p><p class="p5 p7" style="">      <span class="c1">update_load_avg(se, sched_feat(ATTACH_AGE_LOAD) ? 0 : SKIP_AGE_LOAD)</span></p><p class="p5 p7" style="">      propagate_entity_cfs_rq(se)</p></td></tr><tr style="height:8.3%;"><td class="tc36"><p class="p5 p7" style="">rebalance_domains() /</p><p class="p5 p7" style="">idle_balance() </p></td><td class="tc34"><p class="p5 p7" style="">update_blocked_averages(cpu)</p><p class="p5 p7" style="">  for_each_leaf_cfs_rq(rq, cfs_rq)</p><p class="p5 p7" style="">    update_cfs_rq_load_avg()</p><p class="p5 p7" style="">      <span class="c5">__update_load_avg(now, cpu_of(rq_of(cfs_rq)), sa, scale_load_down(cfs_rq-&gt;load.weight), cfs_rq-&gt;curr != NULL, cfs_rq)</span></p><p class="p5 p7" style="">    <span class="c1">update_load_avg(cfs_rq-&gt;tg-&gt;se[cpu], 0)</span></p></td></tr><tr style="height:8.3%;"><td class="tc23 p2 p7">select_task_rq → select_task_rq_fair</td><td class="tc34"><p class="p5 p7" style="">wake_cap()</p><p class="p5 p7" style="">  sync_entity_load_avg(&amp;p-&gt;se)</p><p class="p5 p7" style="">    <span class="c5">__update_load_avg(last_update_time, cpu_of(rq_of(cfs_rq)), &amp;se-&gt;avg, 0, 0, NULL)</span></p></td></tr><tr style="height:8.3%;"><td class="tc23 p2 p7">migrate_task_rq → migrate_task_rq_fair()</td><td class="tc34"><p class="p5 p7" style="">remove_entity_load_avg()</p><p class="p5 p7" style="">  sync_entity_load_avg()</p><p class="p5 p7" style="">    <span class="c5">__update_load_avg(last_update_time, cpu_of(rq_of(cfs_rq)), &amp;se-&gt;avg, 0, 0, NULL)</span></p></td></tr><tr style="height:8.3%;"><td class="tc23 p2 p7">task_dead → task_dead_fair()</td><td class="tc34"><p class="p5 p7" style="">remove_entity_load_avg()</p><p class="p5 p7" style="">  sync_entity_load_avg()</p><p class="p5 p7" style="">    <span class="c5">__update_load_avg(last_update_time, cpu_of(rq_of(cfs_rq)), &amp;se-&gt;avg, 0, 0, NULL)</span></p></td></tr><tr style="height:8.3%;"><td class="tc37 p2 p7">sched_group_set_shares()</td><td class="tc38"><p class="p5 p7" style="">for_each_possible_cpu</p><p class="p5 p7" style="">  for_each_sched_entity</p><p class="p5 p7" style="">    <span class="c1">update_load_avg(se, UPDATE_TG)</span></p></td></tr></table></div></body></html>
